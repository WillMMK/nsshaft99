Fix: Implement a Camera System
To resolve these issues, we need to add a camera system to GameEngine that follows the character and adjusts the rendering accordingly. Here’s how to modify engine.ts:

Modified GameEngine Class
javascript
Wrap
Copy
export class GameEngine {
  // ... (previous properties)
  cameraY: number = 0; // Add camera offset

  constructor(
    canvas: HTMLCanvasElement, 
    onUpdateHealth: (health: number) => void,
    onUpdateScore: (score: number) => void,
    onGameOver: () => void
  ) {
    // ... (previous constructor code)
    this.cameraY = this.character.y - this.canvas.height / 2; // Initialize camera to center the character
  }

  // ... (previous methods)

  update() {
    if (!this.gameActive) return;
    
    // Update character position
    this.updateCharacter();
    
    // Update platforms
    this.updatePlatforms();
    
    // Update camera position
    this.updateCamera();
    
    // Check for collisions
    this.checkCollisions();
    
    // Check for game over conditions
    this.checkGameOver();
    
    // Draw everything
    this.draw();
  }

  // Add method to update camera position
  updateCamera() {
    // Target camera position to keep character in the upper third of the screen
    const targetCameraY = this.character.y - this.canvas.height / 3;
    // Smoothly interpolate camera position
    this.cameraY += (targetCameraY - this.cameraY) * 0.1; // Adjust 0.1 for smoothness
  }

  // Modify draw method to use camera offset
  draw() {
    const ctx = this.ctx;
    
    // Clear canvas
    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    
    // Draw background
    ctx.fillStyle = '#212529';
    ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
    
    // Save context to apply camera transform
    ctx.save();
    
    // Apply camera offset (move the world down as camera moves up)
    ctx.translate(0, -this.cameraY);
    
    // Draw ceiling with spikes
    this.drawCeiling();
    
    // Draw platforms
    for (const platform of this.platforms) {
      if (!platform.collapsed) {
        drawPlatform(ctx, platform);
      }
    }
    
    // Draw character
    drawCharacter(ctx, this.character);
    
    // Restore context to remove camera transform for UI elements
    ctx.restore();
    
    // Debug info - draw character position and camera info
    ctx.fillStyle = 'white';
    ctx.font = '10px Arial';
    ctx.fillText(`Char: (${Math.round(this.character.x)}, ${Math.round(this.character.y)})`, 10, 60);
    ctx.fillText(`CameraY: ${Math.round(this.cameraY)}`, 10, 70);
    ctx.fillText(`Moving: ${this.isMovingLeft ? 'LEFT' : ''}${this.isMovingRight ? 'RIGHT' : ''}`, 10, 80);
    ctx.fillText(`Platforms: ${this.platforms.length}`, 10, 100);
  }

  // ... (rest of the class remains the same)
}
Explanation of Changes
Camera Offset (cameraY):
Added a cameraY property to track the camera’s position in the game world.
Initialized in the constructor to center the character vertically: this.cameraY = this.character.y - this.canvas.height / 2.
Camera Update (updateCamera):
Added an updateCamera method called in the update loop.
Targets a position that keeps the character in the upper third of the screen (this.character.y - this.canvas.height / 3), preventing it from being too close to the bottom.
Uses smooth interpolation (this.cameraY += (targetCameraY - this.cameraY) * 0.1) to avoid jerky movement. You can adjust the 0.1 value (e.g., increase to 0.2 for faster tracking or decrease to 0.05 for smoother tracking).
Rendering with Camera Offset:
In the draw method, the canvas context is translated by -this.cameraY before drawing the game world (ceiling, platforms, character).
This shifts the entire world downward on the screen as cameraY increases, simulating the camera following the character upward.
The context is restored afterward to ensure debug text remains at fixed screen positions.
Additional Adjustment
Game Over Condition: The original checkGameOver method checks if the character falls below the canvas height (this.character.y > this.canvas.height). With a camera, this needs to account for the game world’s progression. Update it as follows:
javascript
Wrap
Copy
checkGameOver() {
  // Check if character fell below the lowest platform plus a buffer
  const lowestPlatformY = this.platforms.length > 0
    ? this.platforms.reduce((lowest, current) => current.y > lowest.y ? current : lowest, this.platforms[0]).y
    : this.canvas.height;
  if (this.character.y > lowestPlatformY + this.canvas.height) {
    this.gameActive = false;
    this.onGameOver();
  }
  
  if (this.health <= 0) {
    this.gameActive = false;
    this.onGameOver();
  }
}
This ensures the game ends if the character falls too far below the lowest platform, regardless of the camera’s position.